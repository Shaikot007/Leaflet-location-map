{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Search","props","map","useLeaflet","provider","useEffect","searchControl","GeoSearchControl","addControl","removeControl","LeafletMap","state","latitude","longitude","address","navigator","geolocation","getCurrentPosition","position","fetch","coords","then","response","json","result","setState","features","properties","display_name","console","error","this","Map","style","height","width","zoom","center","TileLayer","attribution","url","Marker","Popup","OpenStreetMapProvider","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAMMA,EAAS,SAACC,GAAW,IACjBC,EAAQC,cAARD,IACAE,EAAaH,EAAbG,SAWR,OATAC,qBAAU,WACR,IAAMC,EAAgB,IAAIC,IAAiB,CACzCH,aAIF,OADAF,EAAIM,WAAWF,GACR,kBAAMJ,EAAIO,cAAcH,MAC9B,CAACL,EAAOC,EAAKE,IAET,MAmDMM,E,kDA/Cb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,SAAU,EACVC,UAAW,EACXC,QAAS,qBALM,E,gEASE,IAAD,OACdC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAAAC,GACvCC,MAAM,kEAAoED,EAASE,OAAOR,SAAW,QAAUM,EAASE,OAAOP,WAC5HQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZb,SAAUM,EAASE,OAAOR,SAC1BC,UAAWK,EAASE,OAAOP,UAC3BC,QAASU,EAAOE,SAAS,GAAGC,WAAWC,qBAM/CC,QAAQC,MAAM,mD,+BAKhB,IAAMZ,EAAW,CAACa,KAAKpB,MAAMC,SAAUmB,KAAKpB,MAAME,WAClD,OACE,8BACE,eAACmB,EAAA,EAAD,CAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAAWC,KAAM,GAAIC,OAAQnB,EAAnE,UACE,cAACoB,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CAAQvB,SAAUA,EAAlB,SACE,cAACwB,EAAA,EAAD,UAAQX,KAAKpB,MAAMG,YAErB,cAAC,EAAD,CAAQV,SAAU,IAAIuC,e,GAzCPC,IAAMC,WCVhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b091c1c0.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { Map, TileLayer, Marker, Popup, useLeaflet } from \"react-leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\n\n// make new leaflet element\nconst Search = (props) => {\n  const { map } = useLeaflet() // access to leaflet map\n  const { provider } = props;\n\n  useEffect(() => {\n    const searchControl = new GeoSearchControl({\n      provider,\n    });\n\n    map.addControl(searchControl) // this is how you add a control in vanilla leaflet\n    return () => map.removeControl(searchControl)\n  }, [props, map, provider]);\n\n  return null; // don't want anything to show up from this comp\n};\n\nclass LeafletMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      latitude: 0,\n      longitude: 0,\n      address: \"Address not found\"\n    }\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        fetch(\"https://nominatim.openstreetmap.org/reverse?format=geojson&lat=\" + position.coords.latitude + \"&lon=\" + position.coords.longitude)\n          .then(response => response.json())\n          .then(result => {\n            this.setState({\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n              address: result.features[0].properties.display_name\n            });\n          }\n          );\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser!\");\n    }\n  };\n\n  render() {\n    const position = [this.state.latitude, this.state.longitude];\n    return (\n      <div>\n        <Map style={{ height: \"100vh\", width: \"100vw\" }} zoom={10} center={position}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker position={position}>\n            <Popup>{this.state.address}</Popup>\n          </Marker>\n          <Search provider={new OpenStreetMapProvider()} />\n        </Map>\n      </div>\n    );\n  }\n};\n\nexport default LeafletMap;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}